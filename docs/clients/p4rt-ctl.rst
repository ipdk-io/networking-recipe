..
      Copyright 2021-2023 Intel Corporation
      SPDX-License-Identifier: Apache-2.0

      Convention for heading levels in documentation:

      =======  Heading 0 (reserved for the title in a document)
      -------  Heading 1
      ~~~~~~~  Heading 2
      +++++++  Heading 3
      '''''''  Heading 4

      Avoid deeper levels because they do not render well.

=====================
p4rt-ctl Client Guide
=====================

This document describes how to use executables generated by networking-recipe
for supporting P4 programs.

- For code clone and build instructions refer to ``README.build.md``.

Prerequisites
-------------

Before using executables generated by networking-recipe for P4 programming, user should
have a valid P4 file and generated dependent files using P4 compiler for the specific target.

Dependent generated files for a sample.p4 file::

    $ sample.conf, p4info.txt, bf-rt.json, pipe/context.json, pipe/sample.spec


P4 DPDK backend supports both PSA and PNA architectures.
Based on the architecture used in the P4 program, P4 compiler emits the pipeline name differently.
If P4 program is defined for

     - PNA architecture, P4 compiler emits the PIPELINE name as "pipe" irrespective of the
       name defined in the P4 program.
     - PSA architecture, P4 compiler uses and emits the PIPELINE name defined by the user in the program.
       Currently it supports only ingress pipelines.

This pipeline name is referred in below three places and consumed by P4-OVS to program the target.

    a) 'p4_pipeline_name' in /usr/share/stratum/target_skip_p4_no_bsp.conf file.
    b) 'p4_pipeline_name' in sample.conf file.

Networking recipe assumes pipeline name is defaulted to "pipe".
If the P4 program is defined for PSA architecture and uses a pipeline name other than "pipe", we need
to manually change the 'pipeline name' at all the above places to the ingress pipeline name mentioned
in the p4 file.

Hence to avoid this handcrafting, we recommend using the ingress pipeline name as "pipe" for all the
PSA programs.

tdi_pipeline_builder executable
-------------------------------

tdi_pipeline_builder is an executable generated when networking-recipe is built and this
executable is used to generate a protobuf based bin file. This pb.bin contains information
of bfrt-config, context and config which are extracted from sample.conf which is generated
via p4c compiler as mentioned above.

Generate ``pb.bin``::

    $ tdi_pipeline_builder --p4c_conf_file=<path-to-input-sample-file.conf> \
        --bf_pipeline_config_binary_file=<path-to-output-file.pb.bin>
    $ Example: \
        tdi_pipeline_builder --p4c_conf_file=/home/mydir/sample.conf \
            --bf_pipeline_config_binary_file=/home/mydir/sample.pb.bin

.. important::

    Here we need to execute this command from the parent directory of
    relative paths mentioned in bfrt-config/context/config parameters
    of sample.conf


p4rt-ctl executable
--------------------

p4rt-ctl is an executable generated when networking-recipe is built and this executable
is a P4Runtime client which connects to P4Runtime server running in Stratum via gRPC for
enabling P4Runtime capabilities.

Each CLI command connects to gRPC ports opened by server & sends a protobuf based
message. Refer to p4runtime.proto for more details on type of messages and
services that are available for a p4runtime client.

For information on security and enabling TLS on gRPC ports, refer to
guides/security-guide.md

.. code-block:: text

   Usage: p4rt-ctl [OPTIONS] COMMAND [ARG...]

   positional arguments:
     command               Subcommand to run

   optional arguments:
     -h, --help            show this help message and exit
     -g, --grpc_addr       GRPC_ADDR P4Runtime gRPC server address, format : <server IP>:<port>

Details about the isupported option (``-g`` GRPC_ADDR)
------------------------------------------------------
This is an optional parameter. The default value is 127.0.0.1:9559. If the P4Runtime server
is not running locally, you can specify the address using this option.

For example, if the server is listening on ``5.5.5.5:9559``, the command to set the pipeline will be:
 ``p4rt-ctl -g 5.5.5.5:9559 set-pipe sample.pb.bin p4Info.txt``

Details about the supported commands
------------------------------------
1. Set a forwarding pipeline::

    $ p4rt-ctl set-pipe SWITCH PROGRAM P4INFO
    $ Example: p4rt-ctl set-pipe br0 <path>/sample.pb.bin <path>/p4info.txt
 
  .. note::
   
    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally. 
    ``PROGRAM``: Refers to protobuf binary file generated by
    tdi_pipeline_builder executable and the P4 program's configuration file. 
    ``P4INFO``: Refers to P4Info.txt file generated by p4c compiler
    for a P4 program.

2. Get a forwarding pipeline::

    $ p4rt-ctl get-pipe SWITCH
    $ Example: p4rt-ctl set-pipe br0

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.

3. Add a rule for a table into the forwarding pipeline::

    $ p4rt-ctl add-entry SWITCH TABLE FLOW
    $ Example:: p4rt-ctl add-entry br0 ipv4_host "dst_ip=1.1.1.1,action=send(10)"

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``TABLE``: Refers to table_name present in p4info.txt file.
    ``FLOW``: Refers to parameters for a the above mentioned TABLE
    match_field_key=value action=action_name(value)

4. Delete a rule for a table from the forwarding pipeline::

    $ p4rt-ctl del-entry SWITCH TABLE KEY
    $ Example: p4rt-ctl del-entry br0 ipv4_host "dst_ip=1.1.1.1"

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``TABLE``: Refers to table_name present in p4info.txt file.
    ``KEY``: Refers to match_field_key parameter of the above mentioned
    TABLE match_field_key=value

5. Set a default entry for a table into the forwarding pipeline ::

    $ p4rt-ctl set-default-entry SWITCH TABLE ACTION
    $ Example: p4rt-ctl set-default-entry br0 ipv4_host "send(10)"

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``TABLE``: Refers to table_name present in p4info.txt file.
    ``ACTION``: Refers to action parameter of the above mentioned TABLE
    action_name(value)

6. Add action profile member entry for an action selector table ::

    $ p4rt-ctl add-action-profile-member SWITCH ACTION_PROFILE FLOW
    $ Example: p4rt-ctl add-action-profile-member br0 ingress.as_sl3
               "action=ingress.send(0),member_id=1"

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``ACTION_PROFILE``: Refers to action profile name from the p4 file.
    ``FLOW``: Refers to action of the table for which the mentioned
    ACTION_PROFILE is referring to.
    Format "action=action_name(value),member_id=<number>"

7. Delete action profile member entry from an action selector table ::

    $ p4rt-ctl delete-action-profile-member SWITCH ACTION_PROFILE FLOW
    $ Example: p4rt-ctl delete-action-profile-member br0 ingress.as_sl3
               "member_id=1"

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``ACTION_PROFILE``: Refers to action profile name from the p4 file.
    ``FLOW``: Refers to the member ID which was earlier configured via add
    action profile member. Format "member_id=<number>"

8. Get action profile member details for an action selector table ::

    $ p4rt-ctl get-action-profile-member SWITCH ACTION_PROFILE FLOW
    $ Example: p4rt-ctl get-action-profile-member br0 ingress.as_sl3 "member_id=1"

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``ACTION_PROFILE``: Refers to action profile name from the p4 file.
    ``FLOW``: Refers to the member ID which was earlier configured via add
    action profile member. Format "member_id=<number>"

9. Add action profile group entry for an action selector table ::

    $ p4rt-ctl add-action-profile-group SWITCH ACTION_PROFILE FLOW
    $ Example: p4rt-ctl add-action-profile-group br0 ingress.as_sl3 "group_id=1,reference_members=(1),max_size=128"

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``ACTION_PROFILE``: Refers to action profile name from the p4 file.
    ``FLOW``: Maps group with list of members.
    Format "group_id=<group number>,reference_members=<member1,member2,..>,max_size=<maxsize of members this group can have>"

10. Delete action profile group entry from an action selector table ::

    $ p4rt-ctl delete-action-profile-group SWITCH ACTION_PROFILE FLOW
    $ Example: p4rt-ctl delete-action-profile-group br0 ingress.as_sl3 "group_id=1"

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``ACTION_PROFILE``: Refers to action profile name from the p4 file.
    ``FLOW``: Refers to the group ID which was earlier configured via add
    action profile group. Format ""group_id=<number>"

11. Get action profile group details for an action selector table ::

    $ p4rt-ctl get-action-profile-group SWITCH ACTION_PROFILE FLOW
    $ Example: p4rt-ctl get-action-profile-group br0 ingress.as_sl3 "group_id=1"

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``ACTION_PROFILE``: Refers to action profile name from the p4 file.
    ``FLOW``: Refers to the group ID which was earlier configured via add
    action profile group. Format "group_id=<number>"

12. Rule to program ternary match_type ::

    $ p4rt-ctl add-entry SWITCH TABLE FLOW
    $ Example: p4rt-ctl add-entry br0 filter "src_ip=192.168.15.0/255.255.255.0,priority=100,action=drop"

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``TABLE``: Refers to table_name present in p4info.txt file.
    ``FLOW``: Refers to parameters for a the above mentioned TABLE. Since we
    are programming a match_type ternary we expect user to provide priority
    as well. 'priority' is a case sensitivity field expected from user.
    Mask for ternary or WCM match field is expected in x.x.x.x format for IPv4
    or an integer value or a hexa-decimal values.
    match_field_key=value,priority=value,action=action_name(value)

13. Rule to delete ternary match_type ::

    $ p4rt-ctl del-entry SWITCH TABLE KEY
    $ Example: p4rt-ctl del-entry br0 ingress.ipv4_wcm "hdr.ipv4.dst_addr=192.168.1.0/255.255.255.0,priority=10"

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``TABLE``: Refers to table_name present in p4info.txt file.
    ``KEY``: Refers to match_field_key parameters which are programmed for
    the above mentioned TABLE. Since match_type is ternary, we expect user to
    provide previously configured priority as well. 'priority' is a case
    sensitivity field expected from user. Mask for ternary or WCM match field
    is expected in x.x.x.x format for IPv4 or an integer value or a
    hexa-decimal value. Format "match_field_key=value,priority=value"

14. Get indirect counter entry value ::

    $ p4rt-ctl get-counter SWITCH COUNTER_TABLE COUNTER_FLOW
    $ Example: p4rt-ctl get-counter br0 ingress.ipv4_host_counter "counter_id=308545543,index=1"
    $ Example: p4rt-ctl get-counter br0 ingress.ipv4_host_counter "counter_id=0,index=1"

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``COUNTER_TABLE``: Refers to counter table entry from the p4 file.
    ``COUNTER_FLOW``: Refers to the counter ID (generated ID by p4c, refer to bfrt.json file)
    and the counter table index. Format "counter_id=<number>,index=<number>". A counter_id=0
    will display value for all counters added up. For index=UNSET, all cells for specified
    counter_id will be displayed.

15. Reset indirect counter entry value ::

    $ p4rt-ctl reset-counter SWITCH COUNTER_TABLE COUNTER_FLOW
    $ Example: p4rt-ctl reset-counter br0 ingress.ipv4_host_counter "counter_id=308545543,index=1"

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``COUNTER_TABLE``: Refers to counter table entry from the p4 file.
    ``COUNTER_FLOW``: Refers to the counter ID (generated ID by p4c, refer to bfrt.json file)
    and the counter table index. Format "counter_id=<number>,index=<number>"

16. Get direct counter entry value ::

    $ p4rt-ctl get-direct-counter SWITCH TABLE KEY
    $ Example:p4rt-ctl get-direct-counter br0 my_control.e_fwd "hdrs.mac[vmeta.common.depth].da="0x000000000461",hdrs.mac[vmeta.common.depth].sa="0x9ebace98d9d3"" // Egress(Tx)
    $ Example:p4rt-ctl get-direct-counter br0 my_control.i_fwd "hdrs.mac[vmeta.common.depth].da="0x000000000361",hdrs.mac[vmeta.common.depth].sa="0x9ebace98d9d3"" // Ingress(Rx)

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``TABLE``: Refers to table_name present in p4info.txt file.
    ``KEY``: Refers to match_field_key parameter of the above mentioned
    TABLE match_field_key=value

17. Get flow dump entries ::

    $ p4rt-ctl dump-entries SWITCH [TABLE]
    $ Example: p4rt-ctl dump-entries br0

  .. note::

    ``SWITCH``: Refers to the bridge name, which maps to device name
    internally.
    ``TABLE``: Refers to table entry from the p4 file.

Known Issues
-------------

    1) SWITCH parameter specified in ``p4rt-ctl`` commands are not really
    utilized in current releases. It accepts any kind of value

    2) counter_id=0 in ``p4rt-ctl get-counter`` for indirect counters
    is not supported in current release. Flow counters index=unset or index=0
    does not give cumulative byte count.

    3) Runtime validation of ``value`` for each key in ``p4rt-ctl`` is not supported.
